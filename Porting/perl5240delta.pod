=encoding utf8

=head1 NAME

perl5240delta - what is new for perl v5.24.0

=head1 DESCRIPTION

This document describes the differences between the 5.22.0 release and the
5.24.0 release.

=head1 Core Enhancements

=head2 Unicode 8.0 is now supported

For details on what is in this release, see
L<http://www.unicode.org/versions/Unicode8.0.0/>.

=head2 Integer shift (C<< << >> and C<< >> >>) now more explicitly defined

Negative shifts are reverse shifts: left shift becomes right shift,
and right shift becomes left shift.

Shifting by the number of bits in a native integer (or more) is zero,
except when the "overshift" is right shifting a negative value under
C<use integer>, in which case the result is -1 (arithmetic shift).

Until now negative shifting and overshifting have been undefined
because they have relied on whatever the C implementation happens
to do.  For example, for the overshift a common C behavior is
"modulo shift":

  1 >> 64 == 1 >> (64 % 64) == 1 >> 0 == 1  # Common C behavior.

  # And the same for <<, while Perl now produces 0 for both.

Now these behaviors are well-defined under Perl, regardless of what
the underlying C implementation does.  Note, however, that you cannot
escape the native integer width, you need to know how far left you
can go.  You can use for example:

  use Config;
  my $wordbits = $Config{uvsize} * 8;  # Or $Config{uvsize} << 3.

If you need a more bits on the left shift, you can use for example
the C<bigint> pragma, or the C<Bit::Vector> module from CPAN.

=head2 Postfix dereferencing is no longer experimental

Using the C<postderef> and C<postderef_qq> features no longer emits a
warning. Existing code that disables the C<experimental::postderef> warning
category that they previously used will continue to work. The C<postderef>
feature has no effect; all Perl code can use postfix dereferencing,
regardless of what feature declarations are in scope. The C<5.24> feature
bundle now includes the C<postderef_qq> feature.

=head2 printf and sprintf now allow reordered precision arguments

That is, C<< sprintf '|%.*2$|', 2, 3 >> now returns C<|002|>. This extends
the existing reordering mechanism (which allows reordering for arguments
that are used as format fields, widths, and vector separators).

=head1 Incompatible Changes

=head2 Nested declarations are now disallowed

A C<my>, C<our>, or C<state> declaration is no longer allowed inside
of another C<my>, C<our>, or C<state> declaration.

For example, these are now fatal:

   my ($x, my($y));
   our (my $x);

L<[perl #125587]|https://rt.perl.org/Ticket/Display.html?id=125587>

L<[perl #121058]|https://rt.perl.org/Ticket/Display.html?id=121058>

=head2 The C</\C/> character class has been removed.

This regular expression character class was deprecated in v5.20.0 and has
produced a deprecation warning since v5.22.0. It is now a compile-time
error. If you need to examine the individual bytes that make up a
UTF8-encoded character, then use C<utf8::encode()> on the string (or a
copy) first.

=head2 C<chdir('')> no longer chdirs home

Using C<chdir('')> or C<chdir(undef)> to chdir home has been deprecated since
perl v5.8, and will now fail.  Use C<chdir()> instead.

=head2 ASCII characters in variable names must now be all visible

It was legal until now on ASCII platforms for variable names to contain
non-graphical ASCII control characters (ordinals 0 through 31, and 127,
which are the C0 controls and C<DELETE>).  This usage has been
deprecated since v5.20, and as of now causes a syntax error.  The
variables these names referred to are special, reserved by Perl for
whatever use it may choose, now, or in the future.  Each such variable
has an alternative way of spelling it.  Instead of the single
non-graphic control character, a two character sequence beginning with a
caret is used, like C<$^]> and C<${^GLOBAL_PHASE}>.  Details are at
L<perlvar>.   It remains legal, though unwise and deprecated (raising a
deprecation warning), to use certain non-graphic non-ASCII characters in
variables names when not under S<C<use utf8>>.  No code should do this,
as all such variables are reserved by Perl, and Perl doesn't currently
define any of them (but could at any time, without notice).

=head2 The C<autoderef> feature has been removed

The experimental C<autoderef> feature (which allowed calling C<push>,
C<pop>, C<shift>, C<unshift>, C<splice>, C<keys>, C<values>, and C<each> on
a scalar argument) has been deemed unsuccessful. It has now been removed;
trying to use the feature (or to disable the C<experimental::autoderef>
warning it previously triggered) now yields an exception.

=head1 Deprecations

=head2 sysread(), syswrite(), recv() and send() are deprecated on
:utf8 handles

The sysread(), recv(), syswrite() and send() operators
are deprecated on handles that have the C<:utf8> layer, either
explicitly, or implicitly, eg., with the C<:encoding(UTF-16LE)> layer.

Both sysread() and recv() currently use only the C<:utf8> flag for the
stream, ignoring the actual layers.  Since sysread() and recv() do no
UTF-8 validation they can end up creating invalidly encoded scalars.

Similarly, syswrite() and send() use only the C<:utf8> flag, otherwise
ignoring any layers.  If the flag is set, both write the value UTF-8
encoded, even if the layer is some different encoding, such as the
example above.

Ideally, all of these operators would completely ignore the C<:utf8>
state, working only with bytes, but this would result in silently
breaking existing code.  To avoid this a future version of perl will
throw an exception when any of sysread(), recv(), syswrite() or send()
are called on handle with the C<:utf8> layer.

=head1 Performance Enhancements

=over 4

=item *

Creating Perl debugger data structures (see L<perldebguts/"Debugger Internals">)
for XSUBs and const subs has been removed.  This removed one glob/scalar combo
for each unique C<.c> file that XSUBs and const subs came from.  On startup
(C<perl -e"0">) about half a dozen glob/scalar debugger combos were created.
Loading XS modules created more glob/scalar combos.  These things were created
regardless if the perl debugger was being used or not, unlike for pure perl
subs, and ignores that the perl debugger can not debug C code.

=item *

Single arguments in list assign are now slightly faster:

  ($x) = (...);
  (...) = ($x);

=back

=head1 Modules and Pragmata

=head2 Updated Modules and Pragmata

=over 4

=item *

The libnet distribution has been upgraded from version 3.05 to 3.06.

=item *

The Scalar-List-Utils distribution has been upgraded from version 1.41 to 1.42.

=item *

L<autodie> has been upgraded from version 2.26 to 2.27.

=item *

L<CPAN::Meta> has been upgraded from version 2.150001 to 2.150005.

=item *

L<CPAN::Meta::Requirements> has been upgraded from version 2.132 to 2.133.

=item *

L<CPAN::Meta::YAML> has been upgraded from version 0.012 to 0.016.

=item *

L<Encode> has been upgraded from version 2.72 to 2.73.

=item *

L<encoding> has been upgraded from version 2.14 to 2.15.

=item *

L<ExtUtils::CBuilder> has been upgraded from version 0.280221 to 0.280223.

=item *

L<feature> has been upgraded from version 1.40 to 1.41.

=item *

L<Getopt::Long> has been upgraded from version 2.45 to 2.46.

=item *

L<HTTP::Tiny> has been upgraded from version 0.054 to 0.056.

=item *

L<List::Util> has been upgraded from version 1.41 to 1.42_01.

=item *

L<Locale::Codes> has been upgraded from version 3.34 to 3.35.

=item *

L<Math::BigInt> has been upgraded from version 1.9997 to 1.999701.

Correct the behaviour of bdiv() and bmod() in list context. [perl #124300]

Correct C<< Math::BigInt->new() >> for non-integer input.  [perl #124325]

Speed up Math::BigFloat -> blog(). [perl #124382]

Fix bug in Math::BigFloat's bceil() and bint() methods. [perl #124412]

=item *

L<Math::BigRat> has been upgraded from version 0.2608 to 0.260801.

Correct the behaviour of bdiv() and bmod() in list context. [perl #124303]

=item *

L<Module::CoreList> has been upgraded from version 5.20150520 to 5.20150620.

=item *

L<Module::Metadata> has been upgraded from version 1.000026 to 1.000027.

=item *

L<parent> has been upgraded from version 0.232 to 0.234.

=item *

L<Parse::CPAN::Meta> has been upgraded from version 1.4414 to 1.4417.

=item *

L<perl5db.pl> has been upgraded from version 1.49 to 1.49_01.

User actions are no longer evaluated after the script under the
debugger finishes.  [perl #71678]

=item *

L<Pod::Simple> has been upgraded from version 3.29 to 3.30.

=item *

L<Pod::Usage> has been upgraded from version 1.64 to 1.67.

=item *

L<POSIX> has been upgraded from version 1.53 to 1.54.

The NaN payload API has been implemented (getpayload, setpayload,
setpayloadsig, issignaling).

=item *

L<Scalar::Util> has been upgraded from version 1.41 to 1.42_01.

=item *

L<Socket> has been upgraded from version 2.018 to 2.019.

=item *

L<threads> has been upgraded from version 2.01 to 2.02.

=item *

L<Time::Piece> has been upgraded from version 1.29 to 1.30.

=item *

L<UNIVERSAL> has been upgraded from version 1.12 to 1.13.

Don't import from L<UNIVERSAL> in its documentation, it no longer
exports anything.  [perl #125410]

=back

=head1 Documentation

=head2 Changes to Existing Documentation

=head3 L<perlpolicy>

=over 4

=item *

This note has been added to perlpolicy:

  While civility is required, kindness is encouraged; if you have any doubt
  about whether you are being civil, simply ask yourself, "Am I being kind?"
  and aspire to that.

=back

=head3 L<perlvar>

=over 4

=item *

Use of C<$OLD_PERL_VERSION> is now discouraged.

=back

=head1 Diagnostics

The following additions or changes have been made to diagnostic output,
including warnings and fatal error messages.  For the complete list of
diagnostic messages, see L<perldiag>.

=head2 New Diagnostics

=head3 New Errors

=over 4

=item *

L<Can't redeclare "%s" in "%s"|perldiag/"Can't redeclare "%s" in "%s"">

(F) A "my", "our" or "state" declaration was found within another declaration,
such as C<my ($x, my($y), $z)> or C<our (my $x)>.

=back

=head3 New Warnings

=over 4

=item *

L<%s() is deprecated on :utf8 handles|perldiag/"%s() is deprecated on :utf8 handles">

(W deprecated) The sysread(), recv(), syswrite() and send() operators
are deprecated on handles that have the C<:utf8> layer, either
explicitly, or implicitly, eg., with the C<:encoding(UTF-16LE)> layer.

Both sysread() and recv() currently use only the C<:utf8> flag for the
stream, ignoring the actual layers.  Since sysread() and recv() do no
UTF-8 validation they can end up creating invalidly encoded scalars.

Similarly, syswrite() and send() use only the C<:utf8> flag, otherwise
ignoring any layers.  If the flag is set, both write the value UTF-8
encoded, even if the layer is some different encoding, such as the
example above.

Ideally, all of these operators would completely ignore the C<:utf8>
state, working only with bytes, but this would result in silently
breaking existing code.  To avoid this a future version of perl will
throw an exception when any of sysread(), recv(), syswrite() or send()
are called on handle with the C<:utf8> layer.

=back

=head2 Changes to Existing Diagnostics

=over 4

=item *

The diagnostic C<< Hexadecimal float: internal error >> has been changed to
C<< Hexadecimal float: internal error (%s) >> to include more information.

=back

=head1 Configuration and Compilation

=over 4

=item *

F<Configure> should handle spaces in paths a little better.

=back

=head1 Testing

=over 4

=item *

A new test (F<t/op/aassign.t>) has been added to test the list assignment operator
C<OP_AASSIGN>.

=back

=head1 Platform Support

=head2 Platform-Specific Notes

=over 4

=item VMS

=over

=item *

The minimum supported version of VMS is now v7.3-2, released in 2003.  As a
side effect of this change, VAX is no longer supported as the terminal
release of OpenVMS VAX was v7.3 in 2001.

=back

=item Win32

=over

=item *

Visual C++ 2013 builds will now execute on XP and higher. Previously they would
only execute on Vista and higher.

=item *

You can now build perl with GNU Make and GCC.  [perl #123440]

=item *

C<truncate($filename, $size)> now works for files over 4GB in size.
[perl #125347]

=back

=back

=head1 Internal Changes

=over 4

=item *

C<PL_sawalias> and C<GPf_ALIASED_SV> have been removed.

=item *

C<GvASSIGN_GENERATION> and C<GvASSIGN_GENERATION_set> have been removed.

=back

=head1 Selected Bug Fixes

=over 4

=item *

Duplicating a closed file handle for write no longer creates a
filename of the form F<GLOB(0xXXXXXXXX)>.  [perl #125115]

=item *

Warning fatality is now ignored when rewinding the stack.  This
prevents infinite recursion when the now fatal error also causes
rewinding of the stack.  [perl #123398]

=item * 

In perl v5.22.0, the logic changed when parsing a numeric parameter to the -C
option, such that the successfully parsed number was not saved as the option
value if it parsed to the end of the argument.  [perl #125381]

=item *

The PadlistNAMES macro is an lvalue again.

=item *

Zero -DPERL_TRACE_OPS memory for sub-threads.

perl_clone_using() was missing Zero init of PL_op_exec_cnt[].  This
caused sub-threads in threaded -DPERL_TRACE_OPS builds to spew exceedingly
large op-counts at destruct.  These counts would print %x as "ABABABAB",
clearly a mem-poison value.

=item *

A leak in the XS typemap caused one scalar to be leaked each time a C<FILE *>
or a C<PerlIO *> was C<OUTPUT:>ed or imported to Perl, since perl 5.000. These
particular typemap entries are thought to be extremely rarely used by XS
modules. [perl #124181]

=item *

C<alarm()> and C<sleep()> will now warn if the argument is a negative number
and return undef. Previously they would pass the negative value to the
underlying C function which may have set up a timer with a surprising value.

=item *

Perl can again be compiled with any Unicode version.  This used to
(mostly) work, but was lost in v5.18 through v5.20.  The property
C<Name_Alias> did not exist prior to Unicode 5.0.  L<Unicode::UCD>
incorrectly said it did.  This has been fixed.

=item *

Very large code-points (beyond Unicode) in regular expressions no
longer cause a buffer overflow in some cases when converted to UTF-8.
L<[perl #125826]|https://rt.perl.org/Ticket/Display.html?id=125826>

=item *

The integer overflow check for the range operator (...) in list
context now correctly handles the case where the size of the range is
larger than the address space.  This could happen on 32-bits with
-Duse64bitint.
L<[perl #125781]|https://rt.perl.org/Ticket/Display.html?id=125781>

=item *

A crash with C<< %::=(); J->${\"::"} >> has been fixed.
L<[perl #125541]|https://rt.perl.org/Ticket/Display.html?id=125541>

=back

=head1 Acknowledgements

[ XXX: generate this just in time, Ricardo! ]

=head1 Reporting Bugs

If you find what you think is a bug, you might check the articles recently
posted to the comp.lang.perl.misc newsgroup and the perl bug database at
https://rt.perl.org/ .  There may also be information at
http://www.perl.org/ , the Perl Home Page.

If you believe you have an unreported bug, please run the L<perlbug> program
included with your release.  Be sure to trim your bug down to a tiny but
sufficient test case.  Your bug report, along with the output of C<perl -V>,
will be sent off to perlbug@perl.org to be analysed by the Perl porting team.

If the bug you are reporting has security implications, which make it
inappropriate to send to a publicly archived mailing list, then please send it
to perl5-security-report@perl.org.  This points to a closed subscription
unarchived mailing list, which includes all the core committers, who will be
able to help assess the impact of issues, figure out a resolution, and help
co-ordinate the release of patches to mitigate or fix the problem across all
platforms on which Perl is supported.  Please only use this address for
security issues in the Perl core, not for modules independently distributed on
CPAN.

=head1 SEE ALSO

The F<Changes> file for an explanation of how to view exhaustive details on
what changed.

The F<INSTALL> file for how to build Perl.

The F<README> file for general stuff.

The F<Artistic> and F<Copying> files for copyright information.

=cut
